---
title: Weekly Summary
---


## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 2

### Lecture 1

**date**: 

### Lecture 2

**date**: 23/04/24

* fachschaft 
  * [stapel]()
  * kaffeklatsch
  * Lernraum - time & place tba (instagram, whatsapp groups)
  * Room: INF 205 Mathematikon
  * [website](https://mathphys.info)

* [compiler explorer](https://godbolt.org/)
* Small assembly example; modern compilers are very clever at optimizing
* assertions, pre- and post conditions, invariants. 
* fast power algorithm, it's correctness proof
* rules for calculating time complexity of sequential programs
* a common reccurence relation pattern that comes up often, 

\begin{align}
R(n) &= a, &&\text{if n = 1} \\
     &= cn + d\cdot R(n/b) &&\text{if n > 1, divide and conquer}
\end{align}

* complexity of this reccurence relation and its proof 
* Intro to Graphs, basic definitions




## Week 3

### Lecture 1

**date**: 

### Lecture 2

**date**: 30/04/24

* simply linked list
  * splicing
* arrays
  * assembly realization of array access via the website compiler explorer [link](https://godbolt.org/z/G4o5n1PYz)
    with c++ and rust. Differences between c++ and rust. 
  * memory allocation in c++ with `alloc()` and `free()`
  * time complexity of array memory allocation in c++ with `alloc()`: an experiment
  * `pushBack()` and `popBack()` for arrays
    * their realization and (ammortised) complexity

## Week 4

### Lecture 1

**date**: 6/5/24

* amortized complexity
* lists vs arrays
* stacks and queues - introductory discussions
  * double-ended queues

### Lecture 2

**date**: 07/05/24

* division operation optimization by the compiler (or assembly) when dividing by a constant
  this cannot be done if we divide by a variable.
* book recommendation: Hacker's Delight
* Hashing:
  * hash tables
  * applications: symbol tables for compilers, combinatorial games like chess
  * pefect hashing functions are over-optimistic and not practical =>
    usually we have hashing functions that cause 'collisions'
  * closed hashing: components of the table are linked lists. 
  * birthday collision 'paradox' and how it relates to hashing

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:

## Week 1

### Lecture 1

**date**: 

### Lecture 2

**date**:







